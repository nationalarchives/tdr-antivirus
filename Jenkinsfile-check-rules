library("tdr-jenkinslib")

pipeline {
  agent {
    label "built-in"
  }
  stages {
    stage("Check for yara rules updates") {
      steps {
        script {
          def yaraVersion = readFile "yara-version.txt"
          sshagent(['github-jenkins']) {
            sh("rm -rf tdr-configurations")
            sh("git clone --branch master git@github.com:nationalarchives/tdr-configurations.git")
          }
          sh "docker build -f Dockerfile-yara --pull --no-cache --build-arg YARA_VERSION=${yaraVersion} -t yara ."
          sh "docker build -f Dockerfile-compile --no-cache -t yara-rules ."
          def gitVersion = sh(script: "git tag -l --sort -version:refname | head -n 1", returnStdout: true).trim()
          sh "rm -rf lambda"
          sh "mkdir lambda"
          dir("lambda") {
            sh "aws s3 cp s3://tdr-backend-code-mgmt/${gitVersion}/yara-av.zip ."
            sh "unzip yara-av.zip"
            sh "cp output ../output-old"
          }
          sh "aws s3 cp --recursive s3://tdr-antivirus-test-files-mgmt/ ."
          sh "docker build -f Dockerfile-check-rules --no-cache -t yara-run-tests ."
          def status = sh(script: 'docker run yara-run-tests', returnStatus:true)
          sh "rm -rf testfiles"
          if(status == 0) {
            tdr.postToDaTdrSlackChannel(colour: "good",
                message: "New version of yara rules has passed the tests. The new version will now be deployed ${env.BUILD_URL}"
            )
            build(job: "TDR Antivirus Test/master",wait: false)
          } else if(status == 1) {
            tdr.postToDaTdrSlackChannel(colour: "warning",
                message: "New version of yara rules has failed the tests. See the build output for more details ${env.BUILD_URL}"
            )
          } else {
            tdr.postToDaTdrSlackChannel(colour: "good",
                message: "No updates found to the yara rules ${env.BUILD_URL}"
            )
          }
        }
      }
    }

  }
  post {
    failure {
      script {
        tdr.postToDaTdrSlackChannel(colour: "danger", message: "Yara rules check job has failed ${env.BUILD_URL}")
      }
    }
  }
}
