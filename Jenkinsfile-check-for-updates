library("tdr-jenkinslib")

def repo = "tdr-antivirus"
def versionTag = "v${env.BUILD_NUMBER}"
def yaraVersion = "4.1.0"

pipeline {
  agent {
    label "built-in"
  }
  stages {
    stage("Check for updates") {
      steps {
        script {
          sshagent(['github-jenkins']) {
            sh("rm -rf tdr-configurations")
            sh("git clone --branch master git@github.com:nationalarchives/tdr-configurations.git")
          }
          sh "docker build -f Dockerfile-yara --pull --no-cache --build-arg YARA_VERSION=${yaraVersion} -t yara ."
          sh "docker build -f Dockerfile-compile --no-cache -t yara-rules ."
          sh "docker run -itd --rm --name rules-test yara-rules"
          def gitVersion = sh(script: "git describe --tags --abbrev=0", returnStdout: true).trim()
          sh "rm -rf lambda"
          sh "mkdir lambda"
          def sha256Existing = ""
          def sha256New = ""
          dir("lambda") {
            sh "docker cp rules-test:/rules/output ./output-new"
            sh "docker stop rules-test"
            sh "aws s3 cp s3://tdr-backend-code-mgmt/${gitVersion}/yara-av.zip ."
            sh "unzip yara-av.zip"
            sha256Existing = sh(script: "sha256sum output", returnStdout: true).trim()
            sha256New = sh(script: "sha256sum output-new", returnStdout: true).trim()
          }
          if(sha256Existing != sha256New) {
            sh "aws s3 cp --recursive s3://tdr-antivirus-test-files-mgmt/ ."
            sh "docker build -f Dockerfile-run-tests --no-cache -t yara-run-tests ."
            def status = sh(script: 'docker run yara-run-tests', returnStatus:true)
            echo status.toString()
          }
        }
      }
    }

  }
  post {
    failure {
      script {
        echo "Failed"
      }
    }
  }
}
